//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

namespace NSXmlfmt {

    public class driver {
        [STAThread()]
        public static void Main(string[] args) {
            int exitCode = 0;
            string filename;
            NewAppProps nap;

            Logger.logDebug = false;
            if (args.Length < 1) {
                Console.Error.WriteLine("missing xml-filename.");
                exitCode = 1;
            } else {
                if (!File.Exists(filename = args[0])) {
                    Console.Error.WriteLine("file '" + filename + "' not found.");
                    exitCode = 2;
                } else {
                    var anObj = readXmlFile<OldAppProps>(filename);
                    if (anObj != null) {
                        nap = new NewAppProps(anObj);
                        string tet = writeNewXml("NewVersion.xml", nap);
                        Console.Out.WriteLine("RESULT:=" + Environment.NewLine + tet + Environment.NewLine);
                        Trace.WriteLine("RESULT:=" + Environment.NewLine + tet + Environment.NewLine);
                    }
                }
            }
            Environment.Exit(exitCode);
        }

        static string writeNewXml(string v, NewAppProps newObj) {
            XmlSerializer xs;
            XmlWriterSettings xws;

            StringBuilder sb;
            XmlSerializerNamespaces xns = new XmlSerializerNamespaces(new XmlQualifiedName[] {
                new XmlQualifiedName ("","")
            });


            xws = new XmlWriterSettings();
            xws.OmitXmlDeclaration = true;
            xws.Indent = true;
            xws.IndentChars = new string(' ', 4);
            using (XmlWriter xw = XmlWriter.Create(sb = new StringBuilder(), xws)) {
                xs = new XmlSerializer(newObj.GetType());
                xs.Serialize(xw, newObj, xns);
            }
            Console.Out.WriteLine("RESULT:=" + Environment.NewLine + sb.ToString() + Environment.NewLine);
            File.WriteAllText(v, sb.ToString());
            return sb.ToString();
        }

        static T readXmlFile<T>(string filename) where T : class {
            XmlSerializer xs;
            T anObj = default(T);
            XmlReaderSettings xrs;

            try {
                xrs = new XmlReaderSettings();
                xrs.ConformanceLevel = ConformanceLevel.Fragment;
                xrs.IgnoreComments = true;
                xrs.IgnoreWhitespace = true;
                NameTable nt = new NameTable();

                XmlNamespaceManager xnsmgr = new XmlNamespaceManager(nt);
                xnsmgr.AddNamespace("", "");

                XmlParserContext ctx = new XmlParserContext(null, xnsmgr, null, XmlSpace.None);

                using (XmlReader xr = XmlReader.Create(filename, xrs, ctx)) {
                    xs = new XmlSerializer(typeof(T));

                    xs.UnknownAttribute += foundUnknownAttr;
                    xs.UnknownElement += foundUnknownElement;
                    xs.UnknownNode += foundUnknownNode;
                    xs.UnreferencedObject += foundRefObj;
                    anObj = (T)xs.Deserialize(xr);
                    xs.UnknownAttribute -= foundUnknownAttr;
                    xs.UnknownElement -= foundUnknownElement;
                    xs.UnknownNode -= foundUnknownNode;
                    xs.UnreferencedObject -= foundRefObj;
                    xs = null;
                }
            } catch (Exception ex) {
                Trace.WriteLine(decomposeMessage(ex));
                throw;
            }

            return anObj;
        }

        static string decomposeMessage(Exception ex) {
            StringBuilder sb = new StringBuilder();
            Exception ex0 = ex;

            sb.AppendLine(ex.Message);
            ex0 = ex.InnerException;
            while (ex0 != null) {
                sb.AppendLine("[" + ex0.GetType().Name + "] " + ex0.Message);
                ex0 = ex0.InnerException;
            }
            return sb.ToString();
        }

        static void foundRefObj(object sender, UnreferencedObjectEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());
        }

        static void foundUnknownNode(object sender, XmlNodeEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod());
        }

        static void foundUnknownElement(object sender, XmlElementEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod(),
                (e.ObjectBeingDeserialized == null ? "*NO-OBJ*" :

                e.ObjectBeingDeserialized.GetType().FullName) + " has an unhandled element: " + e.Element.Name + " (" + e.LineNumber + "," + e.LinePosition + ")");
        }

        static void foundUnknownAttr(object sender, XmlAttributeEventArgs e) {
            Logger.log(MethodBase.GetCurrentMethod(), e.ObjectBeingDeserialized.GetType().Name + " has an unknown attribute " + e.Attr.Name + ", Value=" + e.Attr.Value + " (" + e.LineNumber + "," + e.LinePosition + ")");
        }
    }
}